"use strict";(self.webpackChunkllmos_ai=self.webpackChunkllmos_ai||[]).push([[559],{4823:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var o=t(4848),a=t(8453);const r={sidebar_position:1,title:"LLMOS Configurations"},s=void 0,i={id:"installation/configurations",title:"LLMOS Configurations",description:"LLMOS provides a set of configuration options that can be set in the /etc/llmos/config.yaml file. If the file doesn't exist, you can create it manually.",source:"@site/docs/installation/configurations.md",sourceDirName:"installation",slug:"/installation/configurations",permalink:"/docs/installation/configurations",draft:!1,unlisted:!1,editUrl:"https://github.com/llmos-ai/llmos.ai/tree/main/docs/docs/installation/configurations.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"LLMOS Configurations"},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/docs/category/installation"},next:{title:"Bootstrap Options",permalink:"/docs/installation/"}},l={},c=[{value:"Minimum Configuration",id:"minimum-configuration",level:3},{value:"Full Configuration Example",id:"full-configuration-example",level:3}];function m(e){const n={code:"code",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["LLMOS provides a set of configuration options that can be set in the ",(0,o.jsx)(n.code,{children:"/etc/llmos/config.yaml"})," file. If the file doesn't exist, you can create it manually."]}),"\n",(0,o.jsx)(n.h3,{id:"minimum-configuration",children:"Minimum Configuration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"mkdir -p /etc/llmos\ncat > /etc/llmos/config.yaml << EOF\nrole: cluster-init\ntoken: mytoken\nEOF\n"})}),"\n",(0,o.jsx)(n.h3,{id:"full-configuration-example",children:"Full Configuration Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'################################################################\n# The following parameters apply to the cluster-init role only #\n################################################################\n\n# LLMOS Operator version to be installed\nllmosOperatorVersion: v0.1.0\n\n# LLMOS chart repository, set to "latest", "rc" or "dev". Defaults to latest.\nchartRepo: latest\n\n# Kubernetes version to be installed. Defaults to a stable k3s version if not specified.\nkubernetesVersion: v1.30.5+k3s1\n\n# Custom values for the LLMOS Operator Helm chart.\n# See https://github.com/llmos-ai/llmos-operator/blob/main/deploy/charts/llmos-operator/values.yaml\noperatorValues:\n  # Default values\n  operator:\n    apiserver:\n      replicaCount: 1\n\n# Additional SANs (hostnames) for the TLS certificate generated for port 6443.\ntlsSans:\n- additionalhostname.example.com\n\n# Commands to run before bootstrapping the node.\npreInstructions:\n  - name: custom-pre-task\n    # Image to extract and set as the current working directory (optional)\n    image: custom/image:1.1.1\n    # Environment variables to set\n    env:\n    - FOO=BAR\n    # Program arguments\n    args:\n    - arg1\n    - arg2\n    # Command to execute\n    command: /bin/dosomething\n    # Save output to /var/lib/llmos/plan/plan-output.json (optional)\n    saveOutput: false\n\n# Commands to run after bootstrapping the node.\npostInstructions:\n  - name: custom-post-task\n    env:\n    - FOO=BAR\n    args:\n    - arg1\n    - arg2\n    command: /bin/dosomething\n    saveOutput: false\n\n# Custom Kubernetes resources to create after the LLMOS operator is bootstrapped.\nresources:\n  - kind: ConfigMap\n    apiVersion: v1\n    metadata:\n      name: random\n    data:\n      key: value\n\n# Content for the `registries.yaml` file used by k3s.\n# Refer to https://rancher.com/docs/k3s/latest/en/installation/private-registry/ for details.\nregistries: {}\n\n# Default registry for LLMOS operator container images.\n# More details: https://github.com/llmos-ai/llmos-operator/blob/main/deploy/charts/llmos-operator/values.yaml\nglobalImageRegistry: someprefix.example.com:5000\n\n# Advanced: Override the Kubernetes system agent installer image.\nruntimeInstallerImage: ...\n\n# Advanced: Override the LLMOS operator installer image.\nllmosInstallerImage: ...\n\n###############################################\n# The following parameters apply to all roles #\n###############################################\n\n# URL for joining a node to the LLMOS cluster.\nserver: https://server-url:6443\n\n# Shared secret for joining nodes to the cluster.\ntoken: mytoken\n\n# Role of this node. The cluster must start with one node as `role=cluster-init`.\n# Additional nodes can join using `server` for control-plane nodes, or `agent` for worker nodes.\n# These roles align with the server/agent terms used by k3s.\nrole: cluster-init,server,agent\n\n# Set the Kubernetes node name.\nnodeName: custom-hostname\n\n# External IP address for the node in Kubernetes.\naddress: 123.123.123.123\n\n# Internal IP address for the node.\ninternalAddress: 123.123.123.124\n\n# Taints to apply to the node upon creation.\ntaints:\n- dedicated=special-user:NoSchedule\n\n# Labels to apply to the node upon creation.\nlabels:\n- key=value\n\n# Advanced: Arbitrary configuration to be placed in `/etc/rancher/k3s/config.yaml.d/40-llmos.yaml`.\nextraConfig: {}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var o=t(6540);const a={},r=o.createContext(a);function s(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);